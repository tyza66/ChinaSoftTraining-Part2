<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">


    <!--  需要创建一个目标对象和一个切面对象  -->
    <!--  创建目标对象 主要业务逻辑要写在目标对象里面  -->
    <bean id="target" class="com.sdm.aop.testaop.Target"></bean>

    <!--  创建切面对象 切面每个阶段调用的方法要写在切面对象里面  -->
    <bean id="aspect" class="com.sdm.aop.testaop.Aspect"></bean>

    <aop:config>
        <!--  切入点:满足条件的目标方法 表达式找到满足条件的目标方法 execution(返回值类型 根包.子包1.子包2.类名.方法名(方法参数1类型,方法参数2类型))  -->
        <!--  任意返回值类型  任意类名 任意方法名 *  任意参数 ..  本包以及任意子包 com..   -->
        <aop:pointcut id="pc" expression="execution(* com.sdm.aop.testaop.Target.*(..))"/>
        <aop:aspect ref="aspect">
            <!--  前置通知：在目标方法之前执行  -->
            <aop:before method="start" pointcut-ref="pc"></aop:before>
            <!--  后置通知：在目标方法之后执行  -->
            <aop:after method="end" pointcut-ref="pc"></aop:after>
            <!--  返回通知：在目标方法返回之后执行  -->
            <aop:after-returning method="afterReturning" pointcut-ref="pc" returning="result"></aop:after-returning>
            <!--  异常通知：在目标方法抛出异常之后执行  -->
            <aop:after-throwing method="afterThrowing" pointcut-ref="pc" throwing="e"></aop:after-throwing>
            <!--  环绕通知：在目标方法之前和之后执行  -->
            <aop:around method="around" pointcut-ref="pc"></aop:around>
        </aop:aspect>
    </aop:config>
</beans>